package com.cb;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL21;
import org.lwjgl.LWJGLException;

public class Game {
	
	TextureManager tm;
	final int width =1280;
	final int height=720;
	
	
	public Game()
	{
		
	}
	
	public void setup()
	{
		
		try {
			Display.setDisplayMode(new DisplayMode(width, height));
			Display.create();
			
			GL11.glEnable(GL11.GL_TEXTURE_2D);
			
			   // enable alpha blending
            GL11.glEnable(GL11.GL_BLEND);
            GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
         
            GL11.glViewport(0,0,width,height);
        GL11.glMatrixMode(GL11.GL_MODELVIEW);
 
        GL11.glMatrixMode(GL11.GL_PROJECTION);
        GL11.glLoadIdentity();
        GL11.glOrtho(0, width, height, 0, 1, -1);
        GL11.glMatrixMode(GL11.GL_MODELVIEW);
			
			
		} catch (LWJGLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.exit(0);
		}
		tm = new TextureManager(this);
		
		
	}
	
	public void cleanup()
	{
		Display.destroy();
	}
	
	public void run()
	{
		setup();
		
		boolean running = true;
		while(running)
		{
			if (Keyboard.isKeyDown(Keyboard.KEY_ESCAPE) || Display.isCloseRequested())
			{
				running = false;
			}
			
			GL11.glClearColor(0.3f, 0.3f, 0.7f, 1.0f);
			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
			tm.Draw();
			
			Display.update();
			Display.sync(60);
		}
		
		cleanup();
	}
}
